//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""BaseInput"",
            ""id"": ""1e7f0658-99a8-4674-940a-e87d593b2b02"",
            ""actions"": [
                {
                    ""name"": ""DirectionalKeys"",
                    ""type"": ""Value"",
                    ""id"": ""2d56837a-6e7f-4917-b922-2c0bd956c586"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Main"",
                    ""type"": ""Button"",
                    ""id"": ""77cccb9b-b988-41e1-b40e-6f8344096d59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""919ab7a6-9117-4257-a1cf-8ed1d34fe85f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""97f6d47c-9a27-4782-974f-ddc92be613f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""8f985a36-bc9f-466a-b8c9-ddaeefcf1623"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dec618d4-5756-43ac-9ce5-b8bfe0863544"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Main"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""438449c5-b501-4200-9495-c2d702d7dec3"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""751dc1ca-aaa0-49d4-a624-0231eaad5110"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab82185f-66dc-4b42-b37c-2c42e154f9d7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b9d62965-fa6d-4abc-a8ee-2c22aded0258"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionalKeys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0df23297-83e0-4450-a6d1-5eaeef2843b0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionalKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""95ca6c0e-6abf-471a-895f-257d1a137f52"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionalKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7368841f-ccdd-4d2a-92be-3468651a228d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionalKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""621ae74e-6412-4a31-a31f-90d54177c194"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionalKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseInput
        m_BaseInput = asset.FindActionMap("BaseInput", throwIfNotFound: true);
        m_BaseInput_DirectionalKeys = m_BaseInput.FindAction("DirectionalKeys", throwIfNotFound: true);
        m_BaseInput_Main = m_BaseInput.FindAction("Main", throwIfNotFound: true);
        m_BaseInput_Secondary = m_BaseInput.FindAction("Secondary", throwIfNotFound: true);
        m_BaseInput_Start = m_BaseInput.FindAction("Start", throwIfNotFound: true);
        m_BaseInput_Select = m_BaseInput.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseInput
    private readonly InputActionMap m_BaseInput;
    private List<IBaseInputActions> m_BaseInputActionsCallbackInterfaces = new List<IBaseInputActions>();
    private readonly InputAction m_BaseInput_DirectionalKeys;
    private readonly InputAction m_BaseInput_Main;
    private readonly InputAction m_BaseInput_Secondary;
    private readonly InputAction m_BaseInput_Start;
    private readonly InputAction m_BaseInput_Select;
    public struct BaseInputActions
    {
        private @InputActions m_Wrapper;
        public BaseInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DirectionalKeys => m_Wrapper.m_BaseInput_DirectionalKeys;
        public InputAction @Main => m_Wrapper.m_BaseInput_Main;
        public InputAction @Secondary => m_Wrapper.m_BaseInput_Secondary;
        public InputAction @Start => m_Wrapper.m_BaseInput_Start;
        public InputAction @Select => m_Wrapper.m_BaseInput_Select;
        public InputActionMap Get() { return m_Wrapper.m_BaseInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseInputActions set) { return set.Get(); }
        public void AddCallbacks(IBaseInputActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseInputActionsCallbackInterfaces.Add(instance);
            @DirectionalKeys.started += instance.OnDirectionalKeys;
            @DirectionalKeys.performed += instance.OnDirectionalKeys;
            @DirectionalKeys.canceled += instance.OnDirectionalKeys;
            @Main.started += instance.OnMain;
            @Main.performed += instance.OnMain;
            @Main.canceled += instance.OnMain;
            @Secondary.started += instance.OnSecondary;
            @Secondary.performed += instance.OnSecondary;
            @Secondary.canceled += instance.OnSecondary;
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(IBaseInputActions instance)
        {
            @DirectionalKeys.started -= instance.OnDirectionalKeys;
            @DirectionalKeys.performed -= instance.OnDirectionalKeys;
            @DirectionalKeys.canceled -= instance.OnDirectionalKeys;
            @Main.started -= instance.OnMain;
            @Main.performed -= instance.OnMain;
            @Main.canceled -= instance.OnMain;
            @Secondary.started -= instance.OnSecondary;
            @Secondary.performed -= instance.OnSecondary;
            @Secondary.canceled -= instance.OnSecondary;
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(IBaseInputActions instance)
        {
            if (m_Wrapper.m_BaseInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseInputActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseInputActions @BaseInput => new BaseInputActions(this);
    public interface IBaseInputActions
    {
        void OnDirectionalKeys(InputAction.CallbackContext context);
        void OnMain(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
}
